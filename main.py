import requests
from bs4 import BeautifulSoup
from telegram import Bot
from datetime import datetime
import pytz
import time
import os

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
URL = "https://www.forexfactory.com/calendar"

bot = Bot(token=BOT_TOKEN)
sent_event_ids = set()

def get_latest_event():
    headers = {'User-Agent': 'Mozilla/5.0'}
    resp = requests.get(URL, headers=headers)
    soup = BeautifulSoup(resp.text, "html.parser")
    rows = soup.find_all("tr", class_="calendar__row")

    for row in rows[::-1]:  # Latest first
        event_id = row.get("data-event-id")
        currency_td = row.find("td", class_="calendar__currency")
        time_td = row.find("td", class_="calendar__time")
        title_td = row.find("td", class_="calendar__event")
        actual_td = row.find("td", class_="calendar__actual")
        previous_td = row.find("td", class_="calendar__previous")

        if not time_td or not title_td or not actual_td or not currency_td:
            continue

        time_str = time_td.text.strip()
        title = title_td.text.strip()
        actual = actual_td.text.strip()
        previous = previous_td.text.strip() if previous_td else "N/A"
        comparison = ""
        currency = currency_td.text.strip()

        if event_id and actual and actual != "-":
            try:
                actual_float = float(actual.replace(',', ''))
                previous_float = float(previous.replace(',', '')) if previous != "N/A" else None
                if previous_float is not None:
                    if actual_float < previous_float:
                        comparison = f"‡∂¥‡∑ô‡∂ª ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä‡∑Ä ‡∂≠‡∑í‡∂∂‡∑î ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂¥‡∑Ñ‡∂≠ ‡∑Ä‡∑ê‡∂ß‡∑ö {actual}"
                    elif actual_float > previous_float:
                        comparison = f"‡∂¥‡∑ô‡∂ª ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä‡∑Ä ‡∂≠‡∑í‡∂∂‡∑î ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö ‡∂∫‡∂∫‡∑í {actual}"
                    else:
                        comparison = f"‡∂¥‡∑ô‡∂ª ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä‡∑Ä ‡∂≠‡∑í‡∂∂‡∑î ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í {actual}"
                else:
                    comparison = f"Actual: {actual}"
            except ValueError:
                comparison = f"Actual: {actual}"

            return {
                "id": event_id,
                "country": currency,
                "time": time_str,
                "title": title,
                "actual": actual,
                "previous": previous,
                "comparison": comparison
            }
    return None

def get_market_reaction(comparison_text):
    reaction = ""
    if "‡∂¥‡∑Ñ‡∂≠" in comparison_text:
        reaction = "üí° ‡∂∂‡∂Ω‡∑è‡∂¥‡∑ú‡∂ª‡∑ú‡∂≠‡∑ä‡∂≠‡∑î‡∑Ä‡∂ß ‡∑Ä‡∂©‡∑è ‡∂Ö‡∂©‡∑î ‡∂Ø‡∂≠‡∑ä‡∂≠, ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö‡∂ß ‡∂∂‡∂ª‡∂¥‡∂≠‡∂Ω ‡∑Ñ‡∑ù ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö."
    elif "‡∂â‡∑Ñ‡∑Ö" in comparison_text:
        reaction = "üìà ‡∂∂‡∂Ω‡∑è‡∂¥‡∑ú‡∂ª‡∑ú‡∂≠‡∑ä‡∂≠‡∑î‡∑Ä‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö ‡∂Ø‡∂≠‡∑ä‡∂≠, ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö‡∂ß ‡∂Ø‡∑ê‡∂©‡∑í ‡∂∞‡∂±‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö."
    elif "‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í" in comparison_text:
        reaction = "‚öñ ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∂∏‡∑è‡∂± ‡∑Ä‡∑ñ ‡∂±‡∑í‡∑É‡∑è ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö‡∂ß ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö."
    else:
        reaction = ""
    return reaction

def send_event(event):
    tz = pytz.timezone('Asia/Colombo')
    now = datetime.now(tz).strftime('%Y-%m-%d %I:%M %p')

    reaction = get_market_reaction(event['comparison'])

    msg = f"""üõë *Breaking News* üì∞
    

üïí *Date & Time:* {now}

üåç *Country :* {event['country']}

üìå *Headline :* {event['title']}

üìà *Actual :* {event['actual']}
üìâ *Previous :* {event.get('previous', 'N/A')}

üîé *Details :* {event['comparison']}

üìà *Market Reaction :* {reaction}

üöÄ *Dev : Mr Chamo üá±üá∞*
"""
    bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

if __name__ == "__main__":
    print("Bot started...")
    latest = get_latest_event()
    if latest:
        send_event(latest)
        sent_event_ids.add(latest['id'])

    while True:
        try:
            event = get_latest_event()
            if event and event['id'] not in sent_event_ids:
                send_event(event)
                sent_event_ids.add(event['id'])
        except Exception as e:
            print("Error:", e)
        time.sleep(1)
