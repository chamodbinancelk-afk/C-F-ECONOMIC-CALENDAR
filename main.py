import requests
from bs4 import BeautifulSoup
from telegram import Bot
from googletrans import Translator
import time
import os

# --- 1. Settings (‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ä) ---

# Telegram Bot Token ‡∂ë‡∂ö ‡∑É‡∑Ñ Channel ID ‡∂ë‡∂ö
TELEGRAM_BOT_TOKEN = "8299929776:AAGKU7rkfakmDBXdgiGSWzAHPgLRJs-twZg" # BotFather ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±
TELEGRAM_CHANNEL_ID = "-1003177936060" # ‡∂±‡∑è‡∂Ω‡∑í‡∂ö‡∑è‡∑Ä‡∑ö ID ‡∂ë‡∂ö

# Google Cloud Translation ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂¥‡∂ª‡∑í‡∑É‡∂ª ‡∑Ä‡∑í‡∂†‡∂Ω‡∑ä‚Äç‡∂∫‡∂∫ (Authentication)
# 'google-cloud-translate' ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∂ª‡∑í‡∑É‡∂ª‡∂∫‡∑ö Google Cloud Credentials ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª ‡∂≠‡∑í‡∂∂‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
# ‡∂ã‡∂Ø‡∑è: os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/path/to/your/service-account-file.json"

# MyFXBook Economic Calendar URL ‡∂ë‡∂ö
MYFXBOOK_URL = "https://www.myfxbook.com/forex-economic-calendar"

# --- 2. Functions (‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑è‡∂ª‡∑ì‡∂≠‡∑ä‡∑Ä‡∂∫) ---

def get_latest_news():
    """
    MyFXBook ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑ò‡∂≠‡∑ä‡∂≠‡∑í ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏.
    ‡∂∏‡∑ô‡∂∫ ‡∑É‡∂ª‡∂Ω Web Scraping ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑í.
    """
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(MYFXBOOK_URL, headers=headers, timeout=10)
        response.raise_for_status() # ‡∂Ø‡∑ù‡∑Ç ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä exception ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í

        soup = BeautifulSoup(response.content, 'html.parser')
        
        # MyFXBook ‡∑Ñ‡∑í ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∂ú‡∑î‡∑Ä ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏. ‡∂±‡∑í‡∑Å‡∑ä‡∂†‡∑í‡∂≠ ID/Class ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í.
        # ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É 'calendar-table' ‡∂±‡∂∏‡∑ä Class ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∑è ‡∂á‡∂≠.
        news_table = soup.find('table', {'id': 'calendarTable'}) 
        
        if news_table:
            # ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂¥‡∑ö‡∑Ö‡∑í ‡∂ö‡∑í‡∑Ñ‡∑í‡∂¥‡∂∫‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            news_rows = news_table.find_all('tr', class_='calendar_row')[:5] 
            
            news_data = []
            for row in news_rows:
                # ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫ ‡∂î‡∂∂ MyFXBook ‡∑Ñ‡∑í ‡∑Ä‡∑ä‚Äç‡∂∫‡∑î‡∑Ñ‡∂∫ ‡∂Ö‡∂±‡∑î‡∑Ä ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
                time_val = row.find('td', class_='time').text.strip() if row.find('td', class_='time') else 'N/A'
                currency = row.find('td', class_='currency').text.strip() if row.find('td', class_='currency') else 'N/A'
                event = row.find('td', class_='event').text.strip() if row.find('td', class_='event') else 'N/A'
                
                # ‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä‡∂ö‡∂∏ (Impact) ‡∑É‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂ö‡∂ª ‡∂ú‡∂±‡∑ä‡∂±. (High/Medium)
                impact = "High Impact" # ‡∑É‡∑ê‡∂∂‡∑ë Scraping Logic ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫
                
                news_data.append({
                    'time': time_val,
                    'currency': currency,
                    'event_en': event,
                    'impact': impact
                })
            return news_data
        
        return []

    except requests.RequestException as e:
        print(f"Error fetching data from MyFXBook: {e}")
        return []

def translate_to_sinhala(text_en):
    """
    Google Cloud Translation API ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫‡∑ô‡∂±‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏.
    """
    try:
        translate_client = translate.Client()
        result = translate_client.translate(
            text_en,
            target_language='si' # ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è ‡∂ö‡∑ö‡∂≠‡∂∫
        )
        return result['translatedText']
    except Exception as e:
        print(f"Translation Error: {e}")
        return f"‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í: {text_en}"

def send_telegram_message(message):
    """
    ‡∂ß‡∑ô‡∂Ω‡∑í‡∂ú‡∑ä‚Äç‡∂ª‡∑ë‡∂∏‡∑ä ‡∂±‡∑è‡∂Ω‡∑í‡∂ö‡∑è‡∑Ä‡∂ß ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏.
    """
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        bot.send_message(
            chat_id=TELEGRAM_CHANNEL_ID,
            text=message,
            parse_mode='Markdown' # ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∑Ñ‡∑ê‡∂© ‡∂ú‡∑ê‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß
        )
        print("Telegram message sent successfully.")
    except Exception as e:
        print(f"Telegram Error: {e}")

def main_job():
    """
    ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫
    """
    print(f"Starting job at {time.ctime()}")
    
    # 1. ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    news_items = get_latest_news()

    if not news_items:
        print("No new news items found or error in scraping.")
        return

    message_parts = []

    for item in news_items:
        # 2. ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫
        event_si = translate_to_sinhala(item['event_en'])
        
        # 3. ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        telegram_message = (
            f"üöÄ *‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏!*\n"
            f"--------------------------------\n"
            f"üï∞Ô∏è *‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä (Time):* {item['time']}\n"
            f"üí± *‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂í‡∂ö‡∂ö‡∂∫ (Currency):* {item['currency']}\n"
            f"üî• *‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä‡∂ö‡∂∏ (Impact):* {item['impact']}\n"
            f"üì∞ *‡∂¥‡∑î‡∑Ä‡∂≠ (Event):* {event_si}\n"
            f"--------------------------------\n"
        )
        message_parts.append(telegram_message)

    # ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ë‡∂ö‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∂ß ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ (‡∑Ä‡∑ô‡∂± ‡∑Ä‡∑ô‡∂±‡∂∏ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß‡∂Ø ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä)
    final_message = "\n".join(message_parts)
    
    # 4. ‡∂ß‡∑ô‡∂Ω‡∑í‡∂ú‡∑ä‚Äç‡∂ª‡∑ë‡∂∏‡∑ä ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    send_telegram_message(final_message)
    
    print(f"Job finished at {time.ctime()}")

# --- 3. Run the Job (‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏) ---

if __name__ == "__main__":
    while True:
      main_job()
      time.sleep(100)
    # ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑É‡∂ö‡∑É‡∂±‡∑ä‡∂± (‡∂ã‡∂Ø‡∑è: ‡∑É‡∑ë‡∂∏ ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 5 ‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä)
    # Production Level ‡∂ë‡∂ö‡∂ö‡∂Ø‡∑ì, Cron Job ‡∑Ñ‡∑ù Cloud Scheduler ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
    
    # ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 5‡∂ö‡∑ä (‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 300) ‡∂∫‡∂±‡∂≠‡∑î‡∂ª‡∑î ‡∂±‡∑í‡∂ª‡∂±‡∑ä‡∂≠‡∂ª‡∂∫‡∑ô‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ì‡∂∏‡∂ß
    # while True:
    #     main_job()
    #     time.sleep(300) # ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 300 ‡∂ö‡∑ä ‡∂±‡∑Ä‡∂≠‡∑ì
    
    # ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∂ß
