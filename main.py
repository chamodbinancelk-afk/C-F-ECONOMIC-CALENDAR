# Forex News Telegram Bot (Full Code with Robust Impact Detection)

import requests
from bs4 import BeautifulSoup
from telegram import Bot
from datetime import datetime
import pytz
import time
import os

# ----------------------------------------------------
# 1. Configuration (‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ä)
# ----------------------------------------------------

# Environment variables must be set for security and proper function.
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
URL = "https://www.forexfactory.com/calendar"

# Initialize Bot and track sent events
bot = Bot(token=BOT_TOKEN)
sent_event_ids = set()

# ----------------------------------------------------
# 2. Helper Functions (‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∂ö ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠)
# ----------------------------------------------------

def analyze_comparison(actual, previous):
    """
    ‡∂¥‡∑ä‚Äç‡∂ª‡∂ö‡∑è‡∑Å‡∂∫‡∂ß ‡∂¥‡∂≠‡∑ä ‡∂ö‡∑Ö Actual ‡∂Ö‡∂ú‡∂∫ Previous ‡∂Ö‡∂ú‡∂∫ ‡∑É‡∂∏‡∂ü ‡∑É‡∂±‡∑ä‡∑É‡∂±‡∑ä‡∂Ø‡∂±‡∂∫ ‡∂ö‡∂ª ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    try:
        # '%' ‡∑É‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠ float ‡∂Ω‡∑ô‡∑É ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∫‡∑í
        a = float(actual.replace('%','').strip())
        p = float(previous.replace('%','').strip())
        
        if a > p:
            return f"‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö‡∂∫‡∑í ({actual}%)", "üìâ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í"
        elif a < p:
            return f"‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂¥‡∑Ñ‡∑Ö‡∂∫‡∑í ({actual}%)", "üìà Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂â‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í"
        else:
            return f"‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í ({actual}%)", "‚öñ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂¥‡∑Ä‡∂≠‡∑ì"
    except:
        # ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂ö‡∑í‡∂∫‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä
        return f"Actual: {actual}", "üîç ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö"

def get_impact(row):
    """
    Forex Factory calendar row ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä impact level ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
    'title' attribute ‡∂ë‡∂ö ‡∑Ñ‡∑ù CSS class ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    impact_td = row.find('td', class_='calendar__impact')
    
    if not impact_td:
        return "Unknown"

    # 1. 'title' attribute ‡∂ë‡∂ö ‡∑É‡∑Ñ‡∑í‡∂≠ span element ‡∂ë‡∂ö ‡∑É‡∑ú‡∂∫‡∑è ‡∂∂‡∂Ω‡∂∫‡∑í
    impact_span = impact_td.find('span', title=True)
    
    if impact_span:
        impact = impact_span['title'].strip()
        if impact:
            return impact

    # 2. Fallback: CSS class ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä color ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í
    impact_span_fallback = impact_td.find('span')
    
    if impact_span_fallback:
        class_attr = impact_span_fallback.get('class', [])
        
        if 'ff-impact-red' in class_attr:
            return "High Impact Expected"
        elif 'ff-impact-ora' in class_attr:
            return "Medium Impact Expected"
        elif 'ff-impact-yel' in class_attr:
            return "Low Impact Expected"

    return "Unknown"

# ----------------------------------------------------
# 3. Main Scraping and Sending Functions (‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠)
# ----------------------------------------------------

def get_latest_event():
    """
    Forex Factory ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑ò‡∂≠‡∑ä‡∂≠‡∑í Event ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
    """
    headers = {'User-Agent': 'Mozilla/5.0'}
    resp = requests.get(URL, headers=headers)
    soup = BeautifulSoup(resp.text, "html.parser")
    rows = soup.find_all("tr", class_="calendar__row")

    # ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä‡∂∏ Events (‡∂¥‡∑Ñ‡∑Ö ‡∑É‡∑í‡∂ß ‡∂â‡∑Ñ‡∑Ö‡∂ß) ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.
    for row in rows[::-1]:
        event_id = row.get("data-event-id")
        currency_td = row.find("td", class_="calendar__currency")
        time_td = row.find("td", class_="calendar__time")
        title_td = row.find("td", class_="calendar__event")
        actual_td = row.find("td", class_="calendar__actual")
        previous_td = row.find("td", class_="calendar__previous")
        impact_td = row.find('td', class_='calendar__impact')

        # ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í
        if not all([event_id, currency_td, title_td, time_td, actual_td, previous_td, impact_td]):
            continue

        actual = actual_td.text.strip()
        previous = previous_td.text.strip() if previous_td else "0"
        
        # Actual ‡∂Ö‡∂ú‡∂∫ ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∑É‡∑Ñ ‡∑Ñ‡∑í‡∑É‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í (Event ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑í ‡∂∂‡∑Ä‡∂ß ‡∑É‡∑Ñ‡∂≠‡∑í‡∂ö ‡∑Ä‡∑ì‡∂∏‡∂ß)
        if not actual or actual == "-":
            continue

        # ‡∂±‡∑Ä get_impact ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠ ‡∂ö‡∂ª‡∂∫‡∑í
        impact_text = get_impact(row)

        return {
            "id": event_id,
            "currency": currency_td.text.strip(),
            "title": title_td.text.strip(),
            "time": time_td.text.strip(),
            "actual": actual,
            "previous": previous,
            "impact": impact_text
        }
    return None

def send_event(event):
    """
    ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ Telegram ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑Ä‡∂∫‡∑í.
    """
    # ‡∑Å‡∑ä‚Äç‡∂ª‡∑ì ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä‡∑ö ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä
    now = datetime.now(pytz.timezone('Asia/Colombo')).strftime('%Y-%m-%d %H:%M:%S')
    
    impact = event['impact']
    if impact == "High Impact Expected":
        impact_level = "üî¥ High"
    elif impact == "Medium Impact Expected":
        impact_level = "üü† Medium"
    elif impact == "Low Impact Expected":
        impact_level = "üü¢ Low"
    else:
        impact_level = "‚ö™ Unknown"
    
    comparison, reaction = analyze_comparison(event['actual'], event['previous'])

    msg = f"""üõë *Breaking News* üì∞

‚è∞ *Date & Time:* {now}

üåç *Currency:* {event['currency']}

üìå *Headline:* {event['title']}

üî• *Impact:* {impact_level}

üìà *Actual:* {event['actual']}
üìâ *Previous:* {event['previous']}

üîç *Details:* {comparison}

üìà *Market Reaction Forecast:* {reaction}

üöÄ *Dev : Mr Chamo üá±üá∞*
"""
    bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

# ----------------------------------------------------
# 4. Execution Block (‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏)
# ----------------------------------------------------

if __name__ == "__main__":
    print("Bot started...")
    while True:
        try:
            event = get_latest_event()
            # ‡∂±‡∑Ä‡∂≠‡∂∏ Event ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂≠‡∑í‡∂∂‡∑ö ‡∂±‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂ë‡∂∫ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∫‡∑Ä‡∑è ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä
            if event and event['id'] not in sent_event_ids:
                send_event(event)
                sent_event_ids.add(event['id'])
                print(f"Sent Event ID: {event['id']} ({event['title']})")
        except Exception as e:
            print("Error:", e)
        
        # ‡∑É‡∂ª‡∑ä‡∑Ä‡∂ª‡∑ä ‡∂∂‡∂ª ‡∂Ö‡∂©‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑É‡∑Ñ Forex Factory ‡∑Ñ‡∑í ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í‡∑Ä‡∂Ω‡∂ß ‡∂Ö‡∂±‡∑î‡∂ö‡∑ñ‡∂Ω ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∑Ä‡∑ê‡∂©‡∑í ‡∂ö‡∂ª‡∂∫‡∑í.
        time.sleep(10)
