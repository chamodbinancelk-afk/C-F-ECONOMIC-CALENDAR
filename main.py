import requests
from bs4 import BeautifulSoup
from telegram import Bot
from datetime import datetime
import pytz
import time
import os
from flask import Flask
from threading import Thread

# ----------------------------------------------------
# 1. Configuration (‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ä)
# ----------------------------------------------------

# Environment variables ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä Token ‡∑É‡∑Ñ Chat ID ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
URL = "https://www.forexfactory.com/calendar"

# Bot object ‡∂ë‡∂ö ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
if not BOT_TOKEN:
    print("Error: TELEGRAM_BOT_TOKEN environment variable not set.")
    exit()

bot = Bot(token=BOT_TOKEN)
# ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∫‡∑Ä‡∑è ‡∂á‡∂≠‡∑í event IDs ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è set ‡∂ë‡∂ö
sent_event_ids = set()

app = Flask(__name__) 

# ----------------------------------------------------
# 2. Helper Functions (‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∂ö ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠)
# ----------------------------------------------------

def analyze_comparison(actual, previous):
    """
    ‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∑Ñ ‡∑Ä‡∂≠‡∑ä‡∂∏‡∂±‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∂Ç‡∑É‡∂±‡∑ä‡∂Ø‡∂±‡∂∫ ‡∂ö‡∂ª ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂¥‡∑Ö ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    try:
        # ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∑Å‡∂≠ ‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª float ‡∂Ö‡∂ú‡∂∫‡∂ö‡∑ä ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        a = float(actual.replace('%','').strip())
        p = float(previous.replace('%','').strip())
        
        # ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫‡∂∫‡∑ô‡∂±‡∑ä, Actual > Previous ‡∂∫‡∂±‡∑î ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂í‡∂ö‡∂ö‡∂∫‡∂ß ‡∂∞‡∂±‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∂ö‡∑í.
        if a > p:
            # ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂ö‡∑Ö ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í‡∂∫: ‡∂â‡∑Ñ‡∑Ö ‡∂Ö‡∂ú‡∂∫‡∂ö‡∑ä ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂í‡∂ö‡∂ö‡∂∫ ‡∑Å‡∂ö‡∑ä‡∂≠‡∑í‡∂∏‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ö‡∂≠‡∑î ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.
            return f"‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö‡∂∫‡∑í (Actual: {actual})", "üìà ‡∂∞‡∂±‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∂ö‡∑ä, ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂â‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í"
        elif a < p:
            # ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂ö‡∑Ö ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í‡∂∫: ‡∂¥‡∑Ñ‡∑Ö ‡∂Ö‡∂ú‡∂∫‡∂ö‡∑ä ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂í‡∂ö‡∂ö‡∂∫ ‡∂Ø‡∑î‡∂ª‡∑ä‡∑Ä‡∂Ω ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ö‡∂≠‡∑î ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.
            return f"‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂¥‡∑Ñ‡∑Ö‡∂∫‡∑í (Actual: {actual})", "üìâ ‡∑É‡∑ò‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∂ö‡∑ä, ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í"
        else:
            return f"‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í (Actual: {actual})", "‚öñÔ∏è ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂¥‡∑Ä‡∂≠‡∑ì"
    except ValueError:
        # float ‡∂∂‡∑Ä‡∂ß ‡∑Ñ‡∑ê‡∂ª‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∂≥‡∑Ñ‡∑è
        return f"Actual: {actual}", "üîç ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∂Ç‡∑É‡∂±‡∑ä‡∂Ø‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö, ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂¥‡∑Ö ‡∂±‡∑ú‡∑Ä‡∑ö"
    except Exception as e:
        print(f"Error in analyze_comparison: {e}")
        return f"Actual: {actual}", "‚ùå ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä"


def get_impact(row):
    """
    Forex Factory calendar row ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä impact level ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
    """
    impact_td = row.find('td', class_='calendar__impact')
    
    if not impact_td:
        return "Unknown"

    # 'title' attribute ‡∂ë‡∂ö ‡∑Ñ‡∂ª‡∑Ñ‡∑è impact ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑î‡∂õ‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂Ø‡∑ì‡∂∏
    impact_span = impact_td.find('span', title=True)
    
    if impact_span and impact_span['title'].strip():
        impact = impact_span['title'].strip()
        return impact

    # class attribute ‡∑Ñ‡∂ª‡∑Ñ‡∑è fallback
    impact_span_fallback = impact_td.find('span')
    
    if impact_span_fallback:
        class_attr = impact_span_fallback.get('class', [])
        
        # High Impact (‡∂ª‡∂≠‡∑î)
        if any('ff-impact-red' in c for c in class_attr):
            return "High Impact Expected"
        # Medium Impact (‡∂≠‡∑ê‡∂π‡∑í‡∂Ω‡∑í)
        elif any('ff-impact-ora' in c for c in class_attr):
            return "Medium Impact Expected"
        # Low Impact (‡∂ö‡∑Ñ)
        elif any('ff-impact-yel' in c for c in class_attr):
            return "Low Impact Expected"

    return "Unknown"

# ----------------------------------------------------
# 3. Main Scraping and Sending Functions (‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠)
# ----------------------------------------------------

def get_latest_event():
    """Forex Factory ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∑Ä‡∑ñ (Actual ‡∂Ö‡∂ú‡∂∫ ‡∑É‡∑Ñ‡∑í‡∂≠) event ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì."""
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
    try:
        resp = requests.get(URL, headers=headers)
        resp.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        return None

    soup = BeautifulSoup(resp.text, "html.parser")
    # 'calendar__row--is-past' ‡∑É‡∑Ñ‡∑í‡∂≠ ‡∂¥‡∑ö‡∑Ö‡∑í ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑É‡∂Ω‡∂ö‡∑è ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏
    rows = soup.find_all("tr", class_="calendar__row")

    # ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä‡∂∏ event ‡∂ë‡∂ö ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ü‡∂¥‡∑É‡∑î ‡∑Ñ‡∑ê‡∂ª‡∑Ä‡∑ì‡∂∏
    for row in rows[::-1]:
        event_id = row.get("data-event-id")
        
        # ‡∂∏‡∑ö‡∂ö ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠ event ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä, ‡∑É‡∂Ω‡∂ö‡∑è ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∂≠
        if 'calendar__row--is-future' in row.get('class', []):
            continue

        currency_td = row.find("td", class_="calendar__currency")
        time_td = row.find("td", class_="calendar__time")
        title_td = row.find("td", class_="calendar__event")
        actual_td = row.find("td", class_="calendar__actual")
        previous_td = row.find("td", class_="calendar__previous")
        
        if not all([event_id, currency_td, title_td, time_td, actual_td, previous_td]):
            continue

        actual = actual_td.text.strip()
        previous = previous_td.text.strip() if previous_td else "-"
        
        # Actual ‡∂Ö‡∂ú‡∂∫ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä (‡∂≠‡∑Ä‡∂∏‡∂≠‡∑ä ‡∂±‡∑í‡∑Ä‡∑ö‡∂Ø‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä), ‡∂∏‡∂ü ‡∑Ñ‡∂ª‡∑í‡∂±‡∑ä‡∂±
        if not actual or actual == "-" or actual == "":
            continue

        impact_text = get_impact(row)
        time_text = time_td.text.strip()
        
        # Time ‡∂ë‡∂ö‡∑ö 'Tentative' ‡∂≠‡∑í‡∂∂‡∑ö ‡∂±‡∂∏‡∑ä ‡∂ë‡∂∫ 'Time' ‡∂±‡∑ú‡∑Ä‡∑ö. ‡∂ë‡∂∫ date cell ‡∂ë‡∂ö‡∂ö‡∑ä.
        if 'Tentative' in time_text:
             continue


        return {
            "id": event_id,
            "currency": currency_td.text.strip(),
            "title": title_td.text.strip(),
            "time": time_text,
            "actual": actual,
            "previous": previous,
            "impact": impact_text
        }
    return None

def send_event(event):
    """Telegram ‡∑Ä‡∑ô‡∂≠ event details ‡∂∫‡∑Ä‡∂∫‡∑í."""
    if not CHAT_ID:
        print("Error: TELEGRAM_CHAT_ID environment variable not set. Cannot send message.")
        return

    # ‡∑Å‡∑ä‚Äç‡∂ª‡∑ì ‡∂Ω‡∂Ç‡∂ö‡∑è ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä (Colombo)
    now = datetime.now(pytz.timezone('Asia/Colombo')).strftime('%Y-%m-%d %H:%M:%S %Z')
    
    impact = event['impact']
    if "High" in impact:
        impact_level = "üî¥ High"
    elif "Medium" in impact:
        impact_level = "üü† Medium"
    elif "Low" in impact:
        impact_level = "üü¢ Low"
    else:
        impact_level = "‚ö™ Unknown"
    
    comparison, reaction = analyze_comparison(event['actual'], event['previous'])

    msg = f"""üõë *Breaking News* üì∞

‚è∞ *Colombo Time:* {now}

üåç *Currency:* {event['currency']}

üìå *Headline:* {event['title']}

üî• *Impact:* {impact_level}

üìä *Data Comparison:* {comparison}

üìà *Actual:* {event['actual']}
üìâ *Previous:* {event['previous']}

üîÆ *Market Forecast:* {reaction}

üöÄ *Dev: Mr Chamo üá±üá∞*
"""
    try:
        bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")
    except Exception as e:
        print(f"Telegram Send Error: {e}")

# ----------------------------------------------------
# 4. Threaded Bot Loop (‡∂±‡∑ú‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∑è ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± Bot ‡∂ö‡∑ú‡∂ß‡∑É)
# ----------------------------------------------------

def run_bot_loop():
    """Bot Loop ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∂∏ Thread ‡∂ë‡∂ö‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß."""
    print("Forex Bot Loop Started. Checking every 60 seconds...")
    # ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑‡∂∫‡∑ö‡∂Ø‡∑ì, ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂ö‡∂ª ‡∂á‡∂≠‡∑í event id ‡∂ß‡∑í‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
    # ‡∂∏‡∑ö‡∂ö ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∑ì ‡∑Ä‡∑ö.
    initial_event = get_latest_event()
    if initial_event:
        sent_event_ids.add(initial_event['id'])
        print(f"Initial event ID collected: {initial_event['id']}")
        
    while True:
        try:
            event = get_latest_event()
            # event ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂ë‡∂∫ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∫‡∑Ä‡∑è ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä
            if event and event['id'] not in sent_event_ids:
                send_event(event)
                sent_event_ids.add(event['id'])
                print(f"Sent New Event ID: {event['id']} - {event['title']}")
            # event ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ì ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä, ‡∂∂‡∑ú‡∑Ñ‡∑ù ‡∑Ä‡∑í‡∂ß ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂Ø ‡∑Ä‡∑ê‡∂©‡∑í ‡∂±‡∑í‡∑É‡∑è
            elif event:
                # ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∫‡∑Ä‡∑è ‡∂á‡∂≠‡∑í event ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∂≠ log ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                pass

        except Exception as e:
            print(f"General Error in Bot Loop: {e}")
        
        # 60 ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª ‡∂¥‡∑ú‡∂ª‡∑ú‡∂≠‡∑ä‡∂≠‡∑î ‡∂ö‡∑è‡∂Ω‡∂∫ (Scraping rate ‡∂Ö‡∂©‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è)
        time.sleep(10)

# ----------------------------------------------------
# 5. Flask Routes (Web Server ‡∂ë‡∂ö)
# ----------------------------------------------------

@app.route('/')
def hello():
    """Bot status ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂± ‡∑É‡∑Ñ uptime monitoring ‡∑É‡∂≥‡∑Ñ‡∑è."""
    return "Forex Bot is Running 24/7! (Checked last at: {}) üöÄ".format(
        datetime.now(pytz.timezone('Asia/Colombo')).strftime('%Y-%m-%d %H:%M:%S %Z')
    ), 200

@app.route('/status')
def status():
    """Bot status details."""
    return {
        "status": "running",
        "events_sent": len(sent_event_ids),
        "bot_name": "ForexNewsBot",
        "last_checked": datetime.now(pytz.timezone('Asia/Colombo')).strftime('%Y-%m-%d %H:%M:%S %Z')
    }, 200

# ----------------------------------------------------
# 6. Execution Block (‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏)
# ----------------------------------------------------

if __name__ == "__main__":
    # Bot loop ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∂∏ thread ‡∂ë‡∂ö‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    t = Thread(target=run_bot_loop)
    t.daemon = True
    t.start()
    
    print("Web Server Starting on port 5000...")
    # Flask web server ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    app.run(host="0.0.0.0", port=5000)
